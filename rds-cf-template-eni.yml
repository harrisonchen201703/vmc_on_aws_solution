Parameters:
  SubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: Second subnet for RDS instance availability (must be on VPC {{{linkedVpcId}}} and not match subnet {{{linkedSubnetId}}})
Resources:
  DataSourceSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Subnets
      SubnetIds:
        - {{{linkedSubnetId}}}
        - !Ref SubnetID
  DataSourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: {{{linkedVpcId}}}
  DSSGIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: "3306"
      ToPort: "3306"
      GroupId: !Ref DataSourceSecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
  DataSource:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      DBName: trend-dsm
      DBSubnetGroupName: !Ref DataSourceSubnetGroup
      Engine: MySQL
      Port: 3306
      MasterUsername: trend-dsm
      MasterUserPassword: {{{randomPassword}}}
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref DataSourceSecurityGroup
    DeletionPolicy: Delete
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
      - PolicyName: vmw-mp-lambda-logs
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - logs:*
              Resource: arn:aws:logs:*:*:*
  CallbackFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = function(event, context) {
              var body = JSON.stringify(event);
              console.log("Sending: " + body);
              var https = require("https");
              var options = {
                  hostname: "{{{hostName}}}",
                  port: 443,
                  path: "{{{path}}}",
                  method: "POST",
                  headers: {
                      "Content-Type": "application/json",
                      "Content-Length": body.length
                  }
              };
              var request = https.request(options, function(response) {
                  console.log("Status: " + response.statusCode);
                  var cfResponse = require("cfn-response");
                  var data = {};
                  cfResponse.send(event, context, cfResponse.SUCCESS, data);
              });
              request.write(body);
              request.end();
          };
      Runtime: nodejs6.10
  RunCallbackFunction:
    Type: Custom::RunCallbackFunction
    Properties:
      ServiceToken: !GetAtt CallbackFunction.Arn
      RDSHost: !GetAtt [DataSource, Endpoint.Address]
      RDSUser: trend-dsm
      RDSPassword: {{{randomPassword}}}
Outputs:
  RDSHost:
    Description: Host name for the RDS instance
    Value: !GetAtt [DataSource, Endpoint.Address]
  RDSUser:
    Description: Username for the RDS instance
    Value: trend-dsm
  RDSPassword:
    Description: Password for the RDS instance
    Value: {{{randomPassword}}}
